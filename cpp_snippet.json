{
	"declare": {
		"prefix": "declare",
		"body": [
		  "#include <bits/stdc++.h>",
		  "#define ll long long",
		  "#define each(it,a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)",
		  "#define sqr(x) ((x) * (x)) ",
		  "#define ff first",
		  "#define ss second ",
		  "typedef std::pair<int, int> pii;",
		  "typedef std::pair<long long, long long> pll;",
		  "typedef std::vector<std::pair<int, int>> vii;",
		  "typedef std::vector<std::pair<long long, long long>> vll;",
		  "using namespace std;",
		  "bool ok = 1;",
		  "const int oo = 2147483647;",
		  "inline void PR(int a[], int n){",
		  "    for (int i = 0; i < n; ++i)",
		  "        cout << a[i] << \" \";",
		  "    cout << endl;",
		  "}",
		  "inline void read(int &n){",
		  "    cin >> n;",
		  "}",
		  "inline void read(int &n, int &m){",
		  "    cin >> n >> m;",
		  "}",
		  "inline void read(int &n, int &m, int &x){",
		  "    cin >> n >> m >> x;",
		  "}",
		  "inline void read(int a[], int n){",
		  "    for (int i = 0; i < n; ++i)",
		  "        cin >> a[i];",
		  "}",
		  "int main() {",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(nullptr);",
		  "    cout.tie(nullptr);",
		  "",
		  "        ",
		  "",
		  "    return 0;",
		  "}",
		  "    ",
		  ""
		],
		"description": "declare"
	  },
	
	  "power": {
		"prefix": "power",
		"body": [
		  "template<typename T>",
		  "T power(T x, T y){",
		  "    if (!y)",
		  "        return 1;",
		  "    if (y == 1)",
		  "        return x;",
		  "    if (y & 1)",
		  "        return power(x, y/2) * power(x, y/2) * x;",
		  "    else",
		  "    {",
		  "        return power(x, y/2) * power(x, y/2);",
		  "    }   ",
		  "}"
		],
		"description": "power"
	  },

	  "binary_search": {
		"prefix": "binary_search",
		"body": [
		  "//Binary Search",
		  "template<typename T>",
		  "T bs(T a[], T l, T r, T x){",
		  "    T mid = (l + r)/2;",
		  "    if (r >= l){",
		  "        if (a[mid] == x)",
		  "            return mid;",
		  "        if (a[mid] > x)",
		  "            return bs(a, l, mid - 1, x);",
		  "        return bs(a, mid + 1, r, x);",
		  "    }",
		  "    return -1;",
		  "}"
		],
		"description": "binary_search"
	  },

	  "prime": {
		"prefix": "prime",
		"body": [
		  "//Prime check O(sqrt(n)/2)",
		  "template<typename T>",
		  "bool prime(T x){",
		  "    if (x == 2 || x == 3)",
		  "        return 1;",
		  "    if (x < 2 || !(x & 1))",
		  "        return 0;",
		  "    for (T i = 3; i*i <= x; i += 2)",
		  "        if (x % i == 0)",
		  "            return 0;",
		  "    return 1;",
		  "}"
		],
		"description": "prime"
	  },

	  "sieve": {
		"prefix": "sieve",
		"body": [
		  "//Prime sieve",
		  "const long long max_length = 1e7 + 9;",
		  "bool prime_sieve[max_length]; ",
		  "template<typename T>",
		  "void sieve(T x){",
		  "    prime_sieve[0] = 0;",
		  "    prime_sieve[1] = 0;",
		  "    for (T i = 2; i <= x; ++i)",
		  "        prime_sieve[i] = 1;",
		  "    for (T i = 2; i * i<= x; ++i)",
		  "        if (prime_sieve[i])",
		  "            for (T j = i*i; j <= x; j +=i)",
		  "                prime_sieve[j] = 0;",
		  "}"
		],
		"description": "sieve"
	  },


	  "matrix": {
		"prefix": "matrix",
		"body": [
		  "template<typename T> ",
		  "class Matrix {",
		  "private:",
		  "    T **p;",
		  "    int m, n;",
		  "public:",
		  "    Matrix(int row, int col) {",
		  "        m = row;",
		  "        n = col;",
		  "        p = new T *[m];",
		  "        for (int i = 0; i < m; i++)",
		  "            p[i] = new T[n];",
		  "    }",
		  "",
		  "    void Input() {",
		  "        for (int i = 0; i < m; i++)",
		  "        {",
		  "            for (int j = 0; j < n; j++)",
		  "            {",
		  "                cin >> p[i][j];",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    void Output() {",
		  "        for (int i = 0; i < m; i++){ ",
		  "            for (int j = 0; j < n; j++)",
		  "                cout << p[i][j] << \" \";",
		  "            cout << endl;",
		  "            }",
		  "    }",
		  "",
		  "    Matrix<T> operator+(Matrix<T> m2)",
		  "    {",
		  "        Matrix<T> C(m, n);",
		  "        for (int i = 0; i < m; i++)",
		  "        {",
		  "            for (int j = 0; j < n; j++)",
		  "            {",
		  "                C.p[i][j] = p[i][j] + m2.p[i][j];",
		  "            }",
		  "        }",
		  "        return C;",
		  "    }",
		  "",
		  "    Matrix<T> operator = (Matrix<T> eq)",
		  "    {",
		  "        m = eq.m;",
		  "        n = eq.n;",
		  "        p = eq.p;",
		  "",
		  "        return *this;",
		  "    }",
		  "",
		  "    friend Matrix<T> operator*(Matrix<T> a,  Matrix<T> b){",
		  "        Matrix<T> B(1, 1);",
		  "        if (a.n == b.m)",
		  "        {",
		  "            Matrix<T> C(a.m, b.n);",
		  "            for (int i = 0; i < a.m; i++)",
		  "            {",
		  "                for (int k = 0; k < b.n; k++)",
		  "                {",
		  "                    C.p[i][k] = 0;",
		  "                    for (int j = 0; j < a.n; j++)",
		  "                    {",
		  "                        C.p[i][k] += a.p[i][j] * b.p[j][k];",
		  "                    }",
		  "                }",
		  "            }",
		  "            B = C;",
		  "        }",
		  "        return B;",
		  "    }",
		  "};"
		],
		"description": "matrix"
	  }
}
